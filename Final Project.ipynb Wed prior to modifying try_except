{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## challenge was to convert lat/long to x,y screen positions and have the nodes be at the approx relative\n",
    "# positions.\n",
    "## also need to ensure that East/West, North/South is translated correctly to x/y pixel coordinate system. Mostly\n",
    "## trial error, but common sense, like knowing Kenmore should be to the left of South Station on network \n",
    "## and thus smaller x value helps.\n",
    "## +71.05)*10000, et al is simply for giving a more granular pixel result, since ploting without this adjustment\n",
    "## gives us pixels VERY close to each other\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import urllib.request, json, time\n",
    "from twilio.rest import TwilioRestClient "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Function Definitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "## GOOD CODE -4/26###, test again if I do TODOs\n",
    "\n",
    "### TODO - Look at sending alerts for disabled bikes or dcoks  ###\n",
    "\n",
    "## set a default value for map_location so we can use this for variety of texts\n",
    "def send_sms_alert(message, map_location = ''):\n",
    "\n",
    "    ## Credentials go below\n",
    "    ## ACCOUNT_SID = ## Saved in environmental variables so authentication isn't hard coded in code\n",
    "    ## AUTH_TOKEN = \n",
    " \n",
    "    client = TwilioRestClient() #(ACCOUNT_SID, AUTH_TOKEN) - Rest Client looks for credentials in environ variables\n",
    "    client.messages.create(\n",
    "        to=\"+18595366066\", \n",
    "        from_=\"+16172863396\",  ## this is TWILIO account phone number\n",
    "        body = message + map_location)\n",
    "        \n",
    "    print('SMS message sent ', message)\n",
    "\n",
    "##############################################################\n",
    "\n",
    "\n",
    "## default msg (sent most often) will be low bikes; others added as needed\n",
    "def send_alert(id, msg = 1):\n",
    "    ### form the message, then call the actual function that sends it above. This function should be able to send a\n",
    "    # variety of message types. After message is formed we'll pass it cleanly to the function above\n",
    "    \n",
    "    ## we don't need statement below but keeping as a reminder that this dict is able to be referenced whether we\n",
    "    ## pass it or not as it's passed by reference not value\n",
    "    global dict_bikes_master\n",
    "    \n",
    "    lat = dict_bikes_master[id]['lat']\n",
    "    lon = dict_bikes_master[id]['lon']\n",
    "    stat_name = dict_bikes_master[id]['name']\n",
    "    bikes_available = dict_bikes_master[id]['num_bikes_available']\n",
    "    if msg == 1:\n",
    "        message_to_send = stat_name +' is low on bikes. ' + str(bikes_available) + ' available.'\n",
    "        map_location = 'http://maps.apple.com/?ll='+str(lat)+','+str(lon)+'&q='+stat_name.replace(' ', '%20')\n",
    "        \n",
    "    ## execute Twilio message\n",
    "    send_sms_alert(message_to_send, map_location)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## Standard code for opening URL and resturning JSON object\n",
    "### does there need to be a 'with/open here?\n",
    "def json_in(url):\n",
    "    \n",
    "    try:\n",
    "        response = urllib.request.urlopen(url)\n",
    "    except urllib.error.HTTPError as e1:\n",
    "        print(e1)\n",
    "    else:\n",
    "        #use json.loads to unpack the json\n",
    "        return json.loads(response.read().decode('utf-8'))\n",
    "    \n",
    "\n",
    "## we'll use a function for less code and cleanliness\n",
    "def json_out(out_file_name, data, var_text):\n",
    "    with open(out_file_name, mode = 'w') as f:\n",
    "        f.write(\"var \" + var_text + \" =\") #Kaleigh added this\n",
    "        json.dump(data , f,indent = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## GOOD CODE -4/26###\n",
    "\n",
    "## Convert lat/long to pixels. See detailed notes\n",
    "def lon_to_x(lon):\n",
    "    return round((40)*(90 +(float(lon)+71.05)*10000) / 180,2)\n",
    "\n",
    "def lat_to_y(lat):\n",
    "    return round((70)*(180 -(float(lat)-42.35)*10000) / 360,2)\n",
    "\n",
    "## shorten the name of station to first 5 words. Here for mainly cleanliness in code below        \n",
    "def shorten(station):\n",
    "    return' '.join(station.split( )[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## TODO might need to set a return ???\n",
    "def set_color_status(current_station):\n",
    "    #print(current_station)\n",
    "    bikes = current_station['num_bikes_available']\n",
    "    current_station['color'] = 'red' if bikes < 3 else 'yellow' if bikes < 6 else 'green'\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Constants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## The Two Hubway Feed URLs we need\n",
    "### Name, lat/long,ID\n",
    "url_station_info = 'https://gbfs.thehubway.com/gbfs/en/station_information.json'\n",
    "\n",
    "## Online?, capacity, bikes available, last rented, etc\n",
    "url_station_status = 'https://gbfs.thehubway.com/gbfs/en/station_status.json'\n",
    "\n",
    "## When to send out low bike message\n",
    "alert_number = 5\n",
    "\n",
    "## Update our feed this often in seconds. Hard coded for now from JSON feed\n",
    "ttl = 10 ## TODO eventually set this from the feed data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Main Code Starts Here!\n",
    "\n",
    "### This gets station position & name. Also our initial data for our baseline. We then update via the live feed in a \n",
    "### loop in the following cell. This cell creates 2 JSON feeds, one with station name and position (translated from\n",
    "### lat/lon to pixels), the second with the data we want to visualize - bikes available, total activity, bikes low?.\n",
    "### Also save all data into a master dictionary (might do away with that).\n",
    "\n",
    "## Split Below up into various cells as logical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "## get bikes available at online stations\n",
    "json_bikes_avail = json_in(url_station_status)\n",
    "json_station_locations = json_in(url_station_info)\n",
    "\n",
    "### make JSON file for status (bikes avail and color code)  and start master dictionary \n",
    "## We need two JSON files for our network visualization 1) station name/ID, position 2) station name/ID, data\n",
    "dict_bikes_master = {}\n",
    "json_list_bikes_avail = []\n",
    "json_list_stations_locations = []\n",
    "\n",
    "\n",
    "## TODO ## Possibly don't need dictionary at all, just manipulate JSON object....???\n",
    "\n",
    "## station is open so we can plot it and update the mster dict. 220 is a test station we need to exclude\n",
    "for station in json_bikes_avail['data']['stations']:    \n",
    "    if station['is_renting'] == 1 and station['station_id']!= '220': \n",
    "        \n",
    "#         if station['num_bikes_available'] < 3:\n",
    "#             dict_bikes_master[station['station_id']] = station\n",
    "#             dict_bikes_master[station['station_id']]['color'] = 'red'\n",
    "#         elif station['num_bikes_available'] < 6:           \n",
    "#             dict_bikes_master[station['station_id']] = station\n",
    "#             dict_bikes_master[station['station_id']]['color'] = 'yellow'\n",
    "#         else:\n",
    "#             dict_bikes_master[station['station_id']] = station\n",
    "#             dict_bikes_master[station['station_id']]['color'] = 'green'\n",
    "\n",
    "        ## easier to get all the data as opposed to just what we need\n",
    "        dict_bikes_master[station['station_id']] = station\n",
    "        dict_bikes_master[station['station_id']]['total_activity'] = 0\n",
    "        \n",
    "        set_color_status(dict_bikes_master[station['station_id']])\n",
    "            \n",
    "        ## start building the bike status JSON file. Will need to add more information from 2nd feed below\n",
    "        ## convert Epoch time to readable for display. Keep Epoch last updated in dictionary for comparison later\n",
    "        json_list_bikes_avail.append({\"ID\": station['station_id'],\\\n",
    "                \"Bikes Available\": station['num_bikes_available'],\\\n",
    "                \"Updated\": time.ctime(station['last_reported']),\\\n",
    "                \"Total Activity\": dict_bikes_master[station['station_id']]['total_activity'],\\\n",
    "                \"color\": dict_bikes_master[station['station_id']]['color']})\n",
    "        \n",
    "        \n",
    "\n",
    "## now finish master dict with location and name info\n",
    "\n",
    "for station in (json_station_locations['data']['stations']):\n",
    "\n",
    "    try:\n",
    "        dict_bikes_master[station['station_id']]['name'] = shorten(station['name'])\n",
    "        dict_bikes_master[station['station_id']]['lat'] = station['lat'] ## TODO do we need this info in DICT?\n",
    "        dict_bikes_master[station['station_id']]['lon'] = station['lon']\n",
    "        ## go ahead and convert to pixels while we are fetching lat and lon\n",
    "        dict_bikes_master[station['station_id']]['y'] = lat_to_y(station['lat'])\n",
    "        dict_bikes_master[station['station_id']]['x'] = lon_to_x(station['lon'])       \n",
    "        \n",
    "        dict_bikes_master[station['station_id']]['region_id'] = station['region_id']\n",
    "        \n",
    "        \n",
    "        ## Build our two JSON files for visualization\n",
    "        json_list_stations_locations.append({\"name\": shorten(station['name']),\\\n",
    "                        \"ID\": station['station_id'],\\\n",
    "                        \"x\": lon_to_x(station['lon']),\\\n",
    "                            \"y\": lat_to_y(station['lat'])})\n",
    "    \n",
    "    \n",
    "    ## we just want to add to stations that are open, which is what our dict is. json_station_location has ALL the\n",
    "    ## stations so we can use try/except to skip the ones which aren't in our master dict, ie. the closed ones\n",
    "    except KeyError:\n",
    "        pass\n",
    "\n",
    "\n",
    "## TODO Put this in comprehension or combine with above\n",
    "\n",
    "## Add station name to bikes available json. The feed only comes with the station ID so we must get the name\n",
    "## from the station information JSON feed. The dict contains ALL info needed from both feeds so just iterate\n",
    "## through it to get the names. Names are needed for display purposes.\n",
    "for station in json_list_bikes_avail:\n",
    "    \n",
    "    station['name'] = dict_bikes_master[station['ID']]['name']\n",
    "    \n",
    "\n",
    "    ## write to our output file\n",
    "json_out('project_posits.json', json_list_stations_locations, 'positions')\n",
    "json_out('project_data.json', json_list_bikes_avail, 'data')\n",
    "\n",
    "## update our point of comparison time\n",
    "## we'll use this later to only look for stations that have been updated afterwards\n",
    "last_compared_time = json_bikes_avail['last_updated']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Update Loop Starts Here!\n",
    "\n",
    "### So the only way to determine if a bike has been rented or returned is to compare current availability to \n",
    "### previous availability. We have our baseline from above. Now below we will fetch all the bike availability\n",
    "### do math, and see changes if any. Then we will update the availability and repeat....\n",
    "\n",
    "## Split below up into various cells as able"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'dict'>\n",
      "Current feed time is- Wed Apr 26 07:45:45 2017\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:10:25 2017\n",
      "Park Dr at Buswell St change of\n",
      "-1 bikes\n",
      "9 - current bikes available\n",
      "10 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:12:00 2017\n",
      "Kendall T change of\n",
      "2 bikes\n",
      "6 - current bikes available\n",
      "4 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:12:13 2017\n",
      "Surface Rd at India St change of\n",
      "1 bikes\n",
      "7 - current bikes available\n",
      "6 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:12:20 2017\n",
      "Lechmere Station at Cambridge St change of\n",
      "-1 bikes\n",
      "6 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:12:49 2017\n",
      "TD Garden - West End change of\n",
      "1 bikes\n",
      "31 - current bikes available\n",
      "30 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:13:36 2017\n",
      "Jackson Square T Stop change of\n",
      "-1 bikes\n",
      "11 - current bikes available\n",
      "12 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:14:58 2017\n",
      "Hyde Square - Barbara St change of\n",
      "-1 bikes\n",
      "6 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:15:16 2017\n",
      "South End Library - Tremont change of\n",
      "-1 bikes\n",
      "7 - current bikes available\n",
      "8 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:15:52 2017\n",
      "Cambridge St at Joy St change of\n",
      "-1 bikes\n",
      "6 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:15:59 2017\n",
      "B.U. Central - 725 Comm. change of\n",
      "-1 bikes\n",
      "3 - current bikes available\n",
      "4 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  B.U. Central - 725 Comm. is low on bikes. 3 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:16:31 2017\n",
      "South Boston Library - 646 change of\n",
      "-1 bikes\n",
      "10 - current bikes available\n",
      "11 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:16:52 2017\n",
      "Harvard University Gund Hall at change of\n",
      "-9 bikes\n",
      "3 - current bikes available\n",
      "12 - previous bikes available\n",
      "\n",
      "absolute value 9\n",
      "SMS message sent  Harvard University Gund Hall at is low on bikes. 3 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:17:32 2017\n",
      "Wentworth Institute of Technology - change of\n",
      "1 bikes\n",
      "2 - current bikes available\n",
      "1 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  Wentworth Institute of Technology - is low on bikes. 2 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:18:05 2017\n",
      "Charles st and Beacon St change of\n",
      "-1 bikes\n",
      "8 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:20:37 2017\n",
      "Beacon St at Washington / change of\n",
      "-2 bikes\n",
      "7 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:22:09 2017\n",
      "Kenmore Square change of\n",
      "-1 bikes\n",
      "8 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:22:17 2017\n",
      "Brigham Circle - Francis St change of\n",
      "1 bikes\n",
      "8 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:24:42 2017\n",
      "ID Building West change of\n",
      "1 bikes\n",
      "8 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:25:24 2017\n",
      "MIT Pacific St at Purrington change of\n",
      "1 bikes\n",
      "12 - current bikes available\n",
      "11 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:25:55 2017\n",
      "MIT Vassar St change of\n",
      "0 bikes\n",
      "20 - current bikes available\n",
      "20 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:25:57 2017\n",
      "Aquarium T Stop - 200 change of\n",
      "-1 bikes\n",
      "8 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:27:03 2017\n",
      "Longwood Ave at Binney St change of\n",
      "1 bikes\n",
      "4 - current bikes available\n",
      "3 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  Longwood Ave at Binney St is low on bikes. 4 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:27:27 2017\n",
      "Christian Science Plaza - Massachusetts change of\n",
      "-1 bikes\n",
      "14 - current bikes available\n",
      "15 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:27:29 2017\n",
      "Commonwealth Ave at Buick St change of\n",
      "0 bikes\n",
      "15 - current bikes available\n",
      "15 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:28:32 2017\n",
      "EF - North Point Park change of\n",
      "1 bikes\n",
      "7 - current bikes available\n",
      "6 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:29:51 2017\n",
      "Harvard Kennedy School at Bennett change of\n",
      "1 bikes\n",
      "6 - current bikes available\n",
      "5 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:30:13 2017\n",
      "S Huntington Ave at Heath change of\n",
      "1 bikes\n",
      "6 - current bikes available\n",
      "5 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:30:17 2017\n",
      "Ink Block - Harrison Ave change of\n",
      "-1 bikes\n",
      "7 - current bikes available\n",
      "8 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:30:20 2017\n",
      "Lafayette Square at Mass Ave change of\n",
      "0 bikes\n",
      "7 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:30:50 2017\n",
      "Cambridge St - at Columbia change of\n",
      "-1 bikes\n",
      "10 - current bikes available\n",
      "11 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:31:06 2017\n",
      "Packard Ave / Powderhouse Blvd change of\n",
      "-2 bikes\n",
      "5 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:31:18 2017\n",
      "Fan Pier change of\n",
      "1 bikes\n",
      "2 - current bikes available\n",
      "1 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  Fan Pier is low on bikes. 2 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:31:22 2017\n",
      "Boylston St at Massachusetts Ave change of\n",
      "1 bikes\n",
      "12 - current bikes available\n",
      "11 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:31:34 2017\n",
      "Seaport Square - Seaport Blvd change of\n",
      "1 bikes\n",
      "8 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:31:51 2017\n",
      "Nashua Street at Red Auerbach change of\n",
      "-1 bikes\n",
      "31 - current bikes available\n",
      "32 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:32:19 2017\n",
      "Harvard University Radcliffe Quadrangle at change of\n",
      "1 bikes\n",
      "14 - current bikes available\n",
      "13 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:32:24 2017\n",
      "Green Street T Stop - change of\n",
      "-1 bikes\n",
      "7 - current bikes available\n",
      "8 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:32:45 2017\n",
      "Washington St at Melnea Cass change of\n",
      "-1 bikes\n",
      "6 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:33:16 2017\n",
      "South Station - 700 Atlantic change of\n",
      "-1 bikes\n",
      "22 - current bikes available\n",
      "23 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:34:03 2017\n",
      "Colleges of the Fenway - change of\n",
      "1 bikes\n",
      "3 - current bikes available\n",
      "2 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  Colleges of the Fenway - is low on bikes. 3 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:34:06 2017\n",
      "Congress St at Sleeper St change of\n",
      "1 bikes\n",
      "6 - current bikes available\n",
      "5 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:35:00 2017\n",
      "Harvard Square at Mass Ave/ change of\n",
      "3 bikes\n",
      "17 - current bikes available\n",
      "14 - previous bikes available\n",
      "\n",
      "absolute value 3\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:35:10 2017\n",
      "Washington St at Rutland St change of\n",
      "-2 bikes\n",
      "10 - current bikes available\n",
      "12 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:35:14 2017\n",
      "MIT at Mass Ave / change of\n",
      "0 bikes\n",
      "5 - current bikes available\n",
      "5 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:35:41 2017\n",
      "Ames St at Main St change of\n",
      "2 bikes\n",
      "3 - current bikes available\n",
      "1 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "SMS message sent  Ames St at Main St is low on bikes. 3 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:36:33 2017\n",
      "Purchase St at Pearl St change of\n",
      "1 bikes\n",
      "2 - current bikes available\n",
      "1 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  Purchase St at Pearl St is low on bikes. 2 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:36:37 2017\n",
      "Danehy Park change of\n",
      "-1 bikes\n",
      "1 - current bikes available\n",
      "2 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  Danehy Park is low on bikes. 1 available.\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:36:47 2017\n",
      "Davis Square change of\n",
      "0 bikes\n",
      "10 - current bikes available\n",
      "10 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:36:54 2017\n",
      "One Kendall Square at Hampshire change of\n",
      "2 bikes\n",
      "7 - current bikes available\n",
      "5 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:37:01 2017\n",
      "175 N Harvard St change of\n",
      "-1 bikes\n",
      "8 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:37:02 2017\n",
      "Somerville City Hall change of\n",
      "-1 bikes\n",
      "4 - current bikes available\n",
      "5 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  Somerville City Hall is low on bikes. 4 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:37:24 2017\n",
      "Tremont St at E Berkeley change of\n",
      "-1 bikes\n",
      "7 - current bikes available\n",
      "8 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:37:25 2017\n",
      "Boylston St at Fairfield St change of\n",
      "0 bikes\n",
      "13 - current bikes available\n",
      "13 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:37:27 2017\n",
      "Yawkey Way at Boylston St. change of\n",
      "-1 bikes\n",
      "12 - current bikes available\n",
      "13 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:38:08 2017\n",
      "Beacon St at Arlington St change of\n",
      "0 bikes\n",
      "5 - current bikes available\n",
      "5 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:38:34 2017\n",
      "Alewife MBTA at Steel Place change of\n",
      "2 bikes\n",
      "17 - current bikes available\n",
      "15 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:38:40 2017\n",
      "359 Broadway - Broadway at change of\n",
      "-2 bikes\n",
      "5 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:38:51 2017\n",
      "Congress St at North St change of\n",
      "-2 bikes\n",
      "5 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:38:55 2017\n",
      "Savin Hill T Stop - change of\n",
      "-1 bikes\n",
      "8 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:39:13 2017\n",
      "Seaport Hotel - Congress St change of\n",
      "1 bikes\n",
      "10 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:39:21 2017\n",
      "Warren St at Chelsea St change of\n",
      "-2 bikes\n",
      "1 - current bikes available\n",
      "3 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "SMS message sent  Warren St at Chelsea St is low on bikes. 1 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:39:29 2017\n",
      "Innovation Lab - 125 Western change of\n",
      "1 bikes\n",
      "5 - current bikes available\n",
      "4 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:39:44 2017\n",
      "Harvard Square at Brattle St change of\n",
      "-1 bikes\n",
      "6 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:40:32 2017\n",
      "Boston City Hall - 28 change of\n",
      "6 bikes\n",
      "6 - current bikes available\n",
      "0 - previous bikes available\n",
      "\n",
      "absolute value 6\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:40:48 2017\n",
      "MIT Stata Center at Vassar change of\n",
      "1 bikes\n",
      "3 - current bikes available\n",
      "2 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  MIT Stata Center at Vassar is low on bikes. 3 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:40:51 2017\n",
      "Rowes Wharf at Atlantic Ave change of\n",
      "-3 bikes\n",
      "7 - current bikes available\n",
      "10 - previous bikes available\n",
      "\n",
      "absolute value 3\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:41:10 2017\n",
      "Charles Circle - Charles St change of\n",
      "-3 bikes\n",
      "2 - current bikes available\n",
      "5 - previous bikes available\n",
      "\n",
      "absolute value 3\n",
      "SMS message sent  Charles Circle - Charles St is low on bikes. 2 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:41:14 2017\n",
      "Post Office Square - Pearl change of\n",
      "1 bikes\n",
      "6 - current bikes available\n",
      "5 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:41:51 2017\n",
      "W Broadway at D St change of\n",
      "-2 bikes\n",
      "15 - current bikes available\n",
      "17 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:41:58 2017\n",
      "Union Square - Somerville change of\n",
      "-1 bikes\n",
      "8 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:42:08 2017\n",
      "Dana Park change of\n",
      "-1 bikes\n",
      "12 - current bikes available\n",
      "13 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:42:14 2017\n",
      "Packard's Corner - Commonwealth Ave change of\n",
      "-1 bikes\n",
      "10 - current bikes available\n",
      "11 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:42:27 2017\n",
      "Binney St / Sixth St change of\n",
      "1 bikes\n",
      "2 - current bikes available\n",
      "1 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "SMS message sent  Binney St / Sixth St is low on bikes. 2 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:42:37 2017\n",
      "HMS/HSPH - Avenue Louis Pasteur change of\n",
      "1 bikes\n",
      "8 - current bikes available\n",
      "7 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:42:50 2017\n",
      "Prudential Center - Belvedere St change of\n",
      "0 bikes\n",
      "9 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:43:20 2017\n",
      "Inman Square at Vellucci Plaza change of\n",
      "-2 bikes\n",
      "13 - current bikes available\n",
      "15 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:43:32 2017\n",
      "Boston Medical Center - E change of\n",
      "1 bikes\n",
      "7 - current bikes available\n",
      "6 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:43:35 2017\n",
      "Porter Square Station change of\n",
      "4 bikes\n",
      "14 - current bikes available\n",
      "10 - previous bikes available\n",
      "\n",
      "absolute value 4\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:43:37 2017\n",
      "Conway Park - Somerville Avenue change of\n",
      "-1 bikes\n",
      "9 - current bikes available\n",
      "10 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:43:59 2017\n",
      "Arch St at Franklin St change of\n",
      "1 bikes\n",
      "7 - current bikes available\n",
      "6 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:44:05 2017\n",
      "Sidney Research Campus/ Erie Street change of\n",
      "2 bikes\n",
      "6 - current bikes available\n",
      "4 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:44:50 2017\n",
      "Linear Park - Mass. Ave. change of\n",
      "-1 bikes\n",
      "11 - current bikes available\n",
      "12 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:44:51 2017\n",
      "Copley Square - Dartmouth St change of\n",
      "2 bikes\n",
      "21 - current bikes available\n",
      "19 - previous bikes available\n",
      "\n",
      "absolute value 2\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:45:02 2017\n",
      "Central Square at Mass Ave change of\n",
      "-3 bikes\n",
      "13 - current bikes available\n",
      "16 - previous bikes available\n",
      "\n",
      "absolute value 3\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:45:07 2017\n",
      "W Broadway at Dorchester St change of\n",
      "-3 bikes\n",
      "10 - current bikes available\n",
      "13 - previous bikes available\n",
      "\n",
      "absolute value 3\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:45:20 2017\n",
      "Allston Green District - Griggs change of\n",
      "-4 bikes\n",
      "9 - current bikes available\n",
      "13 - previous bikes available\n",
      "\n",
      "absolute value 4\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:45:39 2017\n",
      "Cross St at Hanover St change of\n",
      "4 bikes\n",
      "4 - current bikes available\n",
      "0 - previous bikes available\n",
      "\n",
      "absolute value 4\n",
      "SMS message sent  Cross St at Hanover St is low on bikes. 4 available.\n",
      "<class 'dict'>\n",
      "Current feed time is- Wed Apr 26 07:45:56 2017\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:45:51 2017\n",
      "Bunker Hill Community College change of\n",
      "-1 bikes\n",
      "14 - current bikes available\n",
      "15 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:45:53 2017\n",
      "Fan Pier change of\n",
      "0 bikes\n",
      "2 - current bikes available\n",
      "2 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "SMS message sent  Fan Pier is low on bikes. 2 available.\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:45:54 2017\n",
      "Dana Park change of\n",
      "-1 bikes\n",
      "11 - current bikes available\n",
      "12 - previous bikes available\n",
      "\n",
      "absolute value 1\n",
      "<class 'dict'>\n",
      "Current feed time is- Wed Apr 26 07:46:06 2017\n",
      "<class 'dict'>\n",
      "Current feed time is- Wed Apr 26 07:46:16 2017\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:46:10 2017\n",
      "South Station - 700 Atlantic change of\n",
      "0 bikes\n",
      "22 - current bikes available\n",
      "22 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "True\n",
      "False\n",
      "False\n",
      "At time Wed Apr 26 07:46:15 2017\n",
      "Fan Pier change of\n",
      "0 bikes\n",
      "2 - current bikes available\n",
      "2 - previous bikes available\n",
      "\n",
      "absolute value 0\n",
      "SMS message sent  Fan Pier is low on bikes. 2 available.\n",
      "<class 'dict'>\n",
      "Current feed time is- Wed Apr 26 07:46:26 2017\n",
      "True\n",
      "True\n",
      "True\n",
      "At time Wed Apr 26 07:46:23 2017\n",
      "Prudential Center - Belvedere St change of\n",
      "-1 bikes\n",
      "8 - current bikes available\n",
      "9 - previous bikes available\n",
      "\n",
      "absolute value 1\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-60-9b92c952fe6b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;31m## from the Hubway JSON feed and determined by Hubway. We could update less frequently if we are hitting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;31m## server too often but this approximates 'real time' data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mttl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "### MAIN ###########\n",
    "\n",
    "\n",
    "## Basically run until program is interrupted\n",
    "while True:\n",
    "  \n",
    "    ## pause for the ttl time of the update feed. Don't want to run this right after the above cell has run\n",
    "    ## so we pause at the beginning of the loop for the ttl time (set in constants). This value is hardcoded\n",
    "    ## from the Hubway JSON feed and determined by Hubway. We could update less frequently if we are hitting\n",
    "    ## server too often but this approximates 'real time' data \n",
    "    time.sleep(ttl)\n",
    "    \n",
    "    \n",
    "    ## Get latest bike availability\n",
    "    json_bikes_avail_updated = json_in(url_station_status)\n",
    "    \n",
    "    ## TODO - eventually put this in a while loop that times out after xx tries or seconds\n",
    "    ## basically if the data is old sleep and try again. need a counter or something to avoid infinite loop\n",
    "    \n",
    "    ## feed is updated every 10 seconds and we are hitting every 10 seconds. In case we are a little early\n",
    "    ## or feed is a little slow and the updated time hasn't changed, we will pause for 2 seconds and try again\n",
    "    ## TODO - we will do this 30 times and then give up ### Try/Except\n",
    "    while json_bikes_avail_updated['last_updated'] == last_compared_time:\n",
    "        time.sleep(2)\n",
    "        json_bikes_avail_updated = json_in(url_station_status)\n",
    "    \n",
    "    print (type(json_bikes_avail_updated)) ## TODO remove eventually\n",
    "    #print (data)\n",
    "    ### TODO - does this line below do anything???\n",
    "    data2 = (json_bikes_avail_updated['data']['stations'])\n",
    "    \n",
    "    ##  display current feed time\n",
    "    \n",
    "    print('Current feed time is-', time.ctime(json_bikes_avail_updated['last_updated']))\n",
    "    \n",
    "#################\n",
    "    json_list_bikes_avail_updated = []\n",
    "\n",
    "    #for station in json_bikes_avail_updated['data']['stations']:\n",
    "        \n",
    "    ## sort each update to display chronologically. Purely for display purposes\n",
    "    ## this is the new JSON feed from above that we are going through chrono to see if there are changes\n",
    "    ## sorting now will ensure that printing later is chronological\n",
    "    \n",
    "    ##http://stackoverflow.com/questions/72899/how-do-i-sort-a-list-of-dictionaries-by-values-of-the-dictionary-in-python\n",
    "    for station in sorted(json_bikes_avail_updated['data']['stations'], \\\n",
    "                          key=lambda k: k['last_reported'], reverse = False):\n",
    "    \n",
    "#         try:\n",
    "#             print(dict_bikes_master[station['station_id']]['num_bikes_available'])\n",
    "#             print(station['num_bikes_available'])\n",
    "#         except:\n",
    "#             pass\n",
    "#         ## SEt a couple of variables for readability\n",
    "#         try:  ## TODO clean up. using curretly for mssing stations to prevent index/key error\n",
    "#             previous_bikes_avail = dict_bikes_master[station['station_id']]['num_bikes_available']\n",
    "#             current_bikes_avail = station['num_bikes_available']\n",
    "#         except KeyError:\n",
    "#             print('key error')\n",
    "#             pass\n",
    "\n",
    "        \n",
    "        ## So we're looking for changes in the previous availability at stations. Instead of comparing\n",
    "        ## current to previous at each station, first see if station has reported in since last update\n",
    "        ## IF it hasn't then no need to do math and see if number of bikes have changed\n",
    "        \n",
    "        ## only compare stations that have been updated since last feed\n",
    "    \n",
    "        ## TODO figure out why rest of logic isn't working when I have rest of IF statement ##########\n",
    "        if (station['last_reported'] > last_compared_time):# and (previous_bikes_avail != current_bikes_avail):\n",
    "            ## we're not going to add new stations that come online after our base case so we\n",
    "            ## will exclude via try/except. Otherwise if a station comes online after we make our initial\n",
    "            ## dict then we will be attempting to update a non-existent key.\n",
    "            \n",
    "            \n",
    "            ## TODO - Ideally only need one statement in the 'try' block. If key error then use except\n",
    "            ## to pass to the next if loop item, use 'else' statement to execute the rest of statements\n",
    "            ## below.\n",
    "            try: \n",
    "                \n",
    "                previous_bikes_avail = dict_bikes_master[station['station_id']]['num_bikes_available']\n",
    "                current_bikes_avail = station['num_bikes_available']\n",
    "                print(station['last_reported'] > last_compared_time)\n",
    "                print(previous_bikes_avail != current_bikes_avail)\n",
    "                print(((station['last_reported'] > last_compared_time) and (previous_bikes_avail != current_bikes_avail)))\n",
    "                print('At time',time.ctime(station['last_reported']))\n",
    "                print(dict_bikes_master[station['station_id']]['name'], 'change of')\n",
    "                print(current_bikes_avail - previous_bikes_avail, 'bikes')\n",
    "                print(current_bikes_avail, '- current bikes available')\n",
    "                print(previous_bikes_avail, '- previous bikes available\\n')\n",
    "                \n",
    "                ## update master data\n",
    "                dict_bikes_master[station['station_id']].update(station)\n",
    "                set_color_status(dict_bikes_master[station['station_id']])\n",
    "                ## 4/25\n",
    "                ## absolute value as we are just interested in total activity\n",
    "                dict_bikes_master[station['station_id']]['total_activity'] +=\\\n",
    "                abs(current_bikes_avail - previous_bikes_avail)\n",
    "                \n",
    "                print('absolute value', abs(current_bikes_avail - previous_bikes_avail))\n",
    "                \n",
    "                \n",
    "                ########## 4/25 so is there a new JSON file yet?? Figure out today########\n",
    "                \n",
    "                ### TODO - Figure out what to do with JSON file. Rewrite whole file and redraw? OR\n",
    "                ### write changes to new file and push that???\n",
    "                \n",
    "\n",
    "\n",
    "                ## Send text message about low bikes\n",
    "                if station['num_bikes_available'] < alert_number:\n",
    "                    send_alert(station['station_id'])\n",
    "                \n",
    "            except Exception as e:# KeyError:\n",
    "                print(e)\n",
    "#                 pass\n",
    "    \n",
    "## update our point of comparison time\n",
    "    last_compared_time = json_bikes_avail_updated['last_updated']\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SMS message sent  Central Square at Mass Ave is low on bikes. 16 available.\n"
     ]
    }
   ],
   "source": [
    "#send_alert(station['station_id'])\n",
    "send_alert('68')\n",
    "#lat = dict_bikes_master[station[68]]['lat']\n",
    "\n",
    "# for station in sorted(json_bikes_avail_updated['data']['stations'], \\\n",
    "#                           key=lambda k: k['last_reported'], reverse = False):\n",
    "#     #print(dict_bikes_master[station['station_id']]['name'])\n",
    "#     print(station['station_id'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'is_renting': 1, 'x': -98.0, 'is_returning': 1, 'num_docks_available': 3, 'color': 'green', 'y': 5.7, 'name': 'Central Square at Mass Ave', 'region_id': 8, 'lon': -71.1031, 'station_id': '68', 'eightd_has_available_keys': False, 'is_installed': 1, 'num_bikes_disabled': 0, 'total_activity': 0, 'last_reported': 1493203786, 'num_bikes_available': 16, 'lat': 42.36507, 'num_docks_disabled': 0}\n"
     ]
    }
   ],
   "source": [
    "# for station in dict_bikes_master:\n",
    "#     if dict_bikes_master[station]['total_activity'] > 0:\n",
    "#         print(dict_bikes_master[station]['total_activity'], dict_bikes_master[station]['name'])\n",
    "print(dict_bikes_master['68'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#### OLD!!! ##########\n",
    "\n",
    "\n",
    "## look at test the response status for whichever lib I am using\n",
    "# response = requests.get(url)\n",
    "\n",
    "# if response.status_code == 200:\n",
    "\n",
    "#     data = response.json()\n",
    "\n",
    "## Basically run until program is interrupted\n",
    "while True:\n",
    "  \n",
    "    ## pause for the ttl time of the update feed.\n",
    "    time.sleep(ttl)\n",
    "    \n",
    "    \n",
    "    json_bikes_avail_updated = json_in(url_station_status)\n",
    "    \n",
    "    ## TODO - eventually put this in a while loop that times out after xx tries or seconds\n",
    "    ## basically if the data is old sleep and try again. need a counter or something to avoid infinite loop\n",
    "    while json_bikes_avail_updated['last_updated'] == last_compared_time:\n",
    "        time.sleep(2)\n",
    "        json_bikes_avail_updated = json_in(url_station_status)\n",
    "    \n",
    "    print (type(json_bikes_avail_updated))\n",
    "    #print (data)\n",
    "    data2 = (json_bikes_avail_updated['data']['stations'])\n",
    "#################\n",
    "    json_list_bikes_avail_updated = []\n",
    "\n",
    "    for station in json_bikes_avail_updated['data']['stations']:\n",
    "        \n",
    "        ## only compare stations that have been updated since last feed\n",
    "        if station['last_reported'] > last_compared_time:\n",
    "            ## we're not going to add new stations that come online after our base case so we\n",
    "            ## will exclude via try/except.\n",
    "            try:\n",
    "                print(station['name'])\n",
    "                print(dict_bikes_master[station['station_id']]['num_bikes_available'] - station['num_bikes_available'])\n",
    "                \n",
    "                \n",
    "                \n",
    "            except:\n",
    "                pass\n",
    "        \n",
    "        dict_bikes_master[station['station_id']] = station ## TODO -we'll just save all the date for now, pare it down later\n",
    "\n",
    "        if station['is_renting'] == 1 and station['station_id']!= '220': ## station is open so we can plot it and update the mster dict\n",
    "            ### TODO think this is where dict is resetting. think this through....\n",
    "            dict_station_locations[station['station_id']].update(station)\n",
    "            if station['num_bikes_available'] < 3:\n",
    "                dict_station_locations[station['station_id']]['color'] = 'red'\n",
    "            elif station['num_bikes_available'] < 6:           \n",
    "                dict_station_locations[station['station_id']]['color'] = 'yellow'\n",
    "            else:\n",
    "                dict_station_locations[station['station_id']]['color'] = 'green'\n",
    "\n",
    "\n",
    "            json_list_bikes_avail.append({\"ID\": station['station_id'],\\\n",
    "                            \"Bikes Available\": station['num_bikes_available'],\\\n",
    "                            \"color\": dict_station_locations[station['station_id']]['color'],\\\n",
    "                                       \"name\": shorten(dict_station_locations[station['station_id']]['name'])})\n",
    "        ## TODO look at reversing order dict is made so we don't have to delete items\n",
    "        ## remove it from the mster dict. it was added because we had to make dict with lat/lon feed first\n",
    "        ## not feed with station status\n",
    "#         elif station['station_id'] != '220':\n",
    "#             del dict_station_locations[station['station_id']] \n",
    "\n",
    "        ## write to our output file\n",
    "    json_out('project_data.json', json_list_bikes_avail, 'data')\n",
    "    \n",
    "    \n",
    "    \n",
    "##################    \n",
    "    ##http://stackoverflow.com/questions/72899/how-do-i-sort-a-list-of-dictionaries-by-values-of-the-dictionary-in-python\n",
    "    for station in sorted(data2, key=lambda k: k['last_reported'], reverse = True):\n",
    "    #for station in data2:\n",
    "        if station['is_renting'] == 1 and (station['last_reported'] > last_compared_time):\n",
    "            print(dict_station_locations[station['station_id']]['name'], 'Bikes available', station['num_bikes_available'], \\\n",
    "                  'Updated',time.ctime(station['last_reported']))\n",
    "            print(\"Change of \",station['num_bikes_available']- \\\n",
    "                  dict_station_locations[station['station_id']]['num_bikes_available'],'bikes')\n",
    "            \n",
    "            ###TODO this doesn't appear to be working, think i\"m geting cumlative frombeginning\n",
    "            ## update current bikes availbe for current station\n",
    "            ## master DICT is being reset somewhere. Look at Aquarium below in output\n",
    "            print('debug',dict_station_locations[station['station_id']]['num_bikes_available'])\n",
    "            print('debug',station['num_bikes_available'])\n",
    "\n",
    "            dict_station_locations[station['station_id']]['num_bikes_available'] = station['num_bikes_available']\n",
    "            \n",
    "            print('debug',dict_station_locations[station['station_id']]['num_bikes_available'])\n",
    "\n",
    "\n",
    "            \n",
    "            \n",
    "            if station['num_bikes_available'] < alert_number:\n",
    "\n",
    "                ## for cleanliness in message call\n",
    "                lat = dict_station_locations[station['station_id']]['lat']\n",
    "                lon = dict_station_locations[station['station_id']]['lon']\n",
    "                stat = dict_station_locations[station['station_id']]['name']\n",
    "                send_alert()\n",
    "\n",
    "\n",
    "    ## update our point of comparison time\n",
    "    last_compared_time = data['last_updated']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "http://stackoverflow.com/questions/474528/what-is-the-best-way-to-repeatedly-execute-a-function-every-x-seconds-in-python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### code below is side code that eventually needs to be integrated. removes the off line statins and extends out the plotting are via changes to the pixel width in the functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def long_to_x(long):\n",
    "    return round((70)*(90 +(float(long)+71.05)*10000) / 180,2)\n",
    "\n",
    "def lat_to_y(lat):\n",
    "    return round((95)*(180 -(float(lat)-42.35)*10000) / 360,2)\n",
    "\n",
    "\n",
    "json_list_stations_locations = []\n",
    "for station in dict_station_locations:\n",
    "    if dict_station_locations[station]['is_renting'] == 1:\n",
    "  \n",
    "        if dict_station_locations[station]['station_id'] != '220':\n",
    "            json_list_stations_locations.append({\"name\": shorten(dict_station_locations[station]['name']),\\\n",
    "                            \"ID\": dict_station_locations[station]['station_id'],\\\n",
    "                            \"x\": long_to_x(dict_station_locations[station]['lon']),\\\n",
    "                                \"y\": lat_to_y(dict_station_locations[station]['lat'])})\n",
    "\n",
    "    ## write to our output file\n",
    "json_out('project_posits.json', json_list_stations_locations, 'positions')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "for station in dict_station_locations:\n",
    "    print(dict_station_locations[station],'\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "for station in dict_station_locations:\n",
    "    #print(dict_station_locations[station['station_id']])\n",
    "    if dict_station_locations[station]['name'] == 'Davis Square':\n",
    "        print(dict_station_locations[station]['num_bikes_available'])\n",
    "\n",
    "#print(dict_station_locations['140'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
